name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create Release
    runs-on: macos-14
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup SSH for private repositories
      if: env.SSH_PRIVATE_KEY != ''
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Warning - SSH Key Not Configured
      if: env.SSH_PRIVATE_KEY == ''
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "⚠️  WARNING: SSH_PRIVATE_KEY secret is not configured!"
        echo "📖 See .github/SSH_SETUP.md for configuration instructions"
        echo "🔧 Add private key to: https://github.com/${{ github.repository }}/settings/secrets/actions"

    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Resolve Package Dependencies
      run: |
        xcodebuild -resolvePackageDependencies \
          -project InferX.xcodeproj \
          -scheme InferX
        echo "✅ Packages resolved"
        echo "🛈 Dump build settings (macro related)"
        xcodebuild -showBuildSettings -project InferX.xcodeproj -scheme InferX | grep -i -E 'MACRO|SWIFT_VERSION' || true

    - name: Build Release (with Macros enabled)
      id: build_release
      run: |
        set -eo pipefail
        echo "🛠 First attempt (enable macros)"
        xcodebuild archive \
          -project InferX.xcodeproj \
          -scheme InferX \
          -configuration Release \
          -archivePath ./build/InferX.xcarchive \
          -destination 'generic/platform=macOS' \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          OTHER_SWIFT_FLAGS="-enable-experimental-feature Macros" \
          | tee build_attempt_1.log || export BUILD_FAILED=1

        if [ "${BUILD_FAILED}" = "1" ]; then
          echo "⚠️ First attempt failed. Retrying with -skipMacroValidation"
          xcodebuild archive \
            -project InferX.xcodeproj \
            -scheme InferX \
            -configuration Release \
            -archivePath ./build/InferX.xcarchive \
            -destination 'generic/platform=macOS' \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            OTHER_SWIFT_FLAGS="-enable-experimental-feature Macros" \
            -skipMacroValidation \
            | tee build_attempt_retry.log
        fi

    - name: Upload build logs (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-build-logs
        path: |
          build_attempt_1.log
          build_attempt_retry.log
        retention-days: 14

    - name: Create DMG
      run: |
        mkdir -p ./build/dmg
        cp -R ./build/InferX.xcarchive/Products/Applications/InferX.app ./build/dmg/
        ln -s /Applications ./build/dmg/Applications
        hdiutil create -volname "InferX" -srcfolder ./build/dmg -ov -format UDZO ./build/InferX-${{ steps.get_version.outputs.VERSION }}.dmg

    - name: Generate Release Notes
      id: release_notes
      run: |
        if [ -f "RELEASE_NOTES_${{ steps.get_version.outputs.VERSION }}.md" ]; then
          cat "RELEASE_NOTES_${{ steps.get_version.outputs.VERSION }}.md" > release_notes.md
        else
          cat > release_notes.md << 'EOF'
        ## What's New in ${{ steps.get_version.outputs.VERSION }}

        ### Features
        - Multi-model support (Ollama, Gemini, HuggingFace, MLX)
        - Streaming conversations with real-time responses
        - Full Markdown rendering with code highlighting
        - Math formulas support (KaTeX)
        - Mermaid chart visualization
        - File attachments support
        - Local data persistence with SwiftData

        ### Technical Highlights
        - Built with Swift 6.0 and SwiftUI
        - MVVM architecture with Actor concurrency
        - Incremental Markdown rendering
        - Apple Silicon optimization (MLX)

        ## Installation

        1. Download `InferX-${{ steps.get_version.outputs.VERSION }}.dmg`
        2. Open the DMG file
        3. Drag InferX.app to Applications folder
        4. Launch InferX and configure your model APIs

        ## System Requirements
        - macOS 15.0 (Sequoia) or later
        - Apple Silicon (M1/M2/M3) or Intel processor

        ## Full Documentation
        See [README.md](https://github.com/${{ github.repository }}/blob/master/README.md) for complete documentation.
        EOF
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: InferX ${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          ./build/InferX-${{ steps.get_version.outputs.VERSION }}.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: InferX-${{ steps.get_version.outputs.VERSION }}
        path: ./build/InferX-${{ steps.get_version.outputs.VERSION }}.dmg
        retention-days: 30
